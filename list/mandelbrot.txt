Sections:
00: "org0001:1000" (1000-1468)


Source: ".\Examples\mandelbrot.s"
                        	     1:     ; Mandelbrot using ascii
                        	     2:     .org $1000
                        	     3: 
                        	     4:     ; Start
00:1000 A90A            	     5:     lda #10
00:1002 203710          	     6:     jsr IO_ECHO
                        	     7: 
00:1005 A000            	     8:     ldy #0
                        	     9: loopy:
00:1007 A200            	    10:     ldx #0
                        	    11: loopx:
00:1009 201513          	    12:     jsr mand_get
00:100C 18              	    13:     clc
00:100D 6920            	    14:     adc #' '
00:100F 203710          	    15:     jsr IO_ECHO
00:1012 203710          	    16:     jsr IO_ECHO
00:1015 E8              	    17:     inx
00:1016 E020            	    18:     cpx #MAND_WIDTH
00:1018 D0EF            	    19:     bne loopx
00:101A A90A            	    20:     lda #10
00:101C 203710          	    21:     jsr IO_ECHO
00:101F C8              	    22:     iny
00:1020 C016            	    23:     cpy #MAND_HEIGHT
00:1022 D0E3            	    24:     bne loopy
00:1024 A90A            	    25:     lda #10
00:1026 203710          	    26:     jsr IO_ECHO
00:1029 4C00C1          	    27:     jmp $c100
                        	    28: 
                        	    29:     .include io.s

Source: "io.s"
                        	     1: IO_DATA         = $C000
                        	     2: IO_STATUS       = $C001
                        	     3: IO_DDR_DATA     = $C002
                        	     4: IO_DDR_CTRL     = $C003
                        	     5: IO_RD           = %00000001
                        	     6: IO_WR           = %00000010
                        	     7: IO_KEY          = $82                           ; ZP Last key pressed
                        	     8: 
                        	     9: IO_INIT:
00:102C A9FF            	    10:                 LDA     #$FF                    ;
00:102E 8D02C0          	    11:                 STA     IO_DDR_DATA             ; UART All output (default)
00:1031 A903            	    12:                 LDA     #$03                    ;
00:1033 8D03C0          	    13:                 STA     IO_DDR_CTRL             ; UART Ctrl pins [OI....RW] B1=Read B0=Write as output, UART Status B7=
00:1036 60              	    14:                 RTS
                        	    15: 
                        	    16: IO_ECHO:
00:1037 2C01C0          	    17:                 BIT     IO_STATUS               ; Wait for output to be ready
00:103A 30FB            	    18:                 BMI     IO_ECHO
                        	    19: IO_OUT:
00:103C 8D00C0          	    20:                 STA     IO_DATA                 ; Output Character to UART
00:103F 48              	    21:                 PHA
00:1040 A903            	    22:                 LDA     #(IO_WR|IO_RD)          ; Set WR and RD to High
00:1042 8D01C0          	    23:                 STA     IO_STATUS
00:1045 A902            	    24:                 LDA     #IO_WR                  ; Write (active low)
00:1047 8D01C0          	    25:                 STA     IO_STATUS
00:104A A903            	    26:                 LDA     #(IO_WR|IO_RD)          ; Set WR and RD to High
00:104C 8D01C0          	    27:                 STA     IO_STATUS
00:104F 68              	    28:                 PLA
00:1050 60              	    29:                 RTS                             ; Return.
                        	    30: 
                        	    31: IO_INKEY:
00:1051 2C01C0          	    32:                 BIT     IO_STATUS               ; Wait for keypress
00:1054 70FB            	    33:                 BVS     IO_INKEY
                        	    34: IO_IN:
00:1056 A900            	    35:                 LDA     #$00                    ; SET ALL PINS ON PORT A TO INPUT
00:1058 8D02C0          	    36:                 STA     IO_DDR_DATA
00:105B A901            	    37:                 LDA     #IO_RD                  ; READ PIN FOR UART (ACTIVE LOW)
00:105D 8D01C0          	    38:                 STA     IO_STATUS
00:1060 AD00C0          	    39:                 LDA     IO_DATA                 ; READ DATA (KEYPRESS)
00:1063 8582            	    40:                 STA     IO_KEY                  ; SAVE DATA
00:1065 A903            	    41:                 LDA     #(IO_WR|IO_RD)          ; SET WR AND RD TO HIGH
00:1067 8D01C0          	    42:                 STA     IO_STATUS
00:106A A9FF            	    43:                 LDA     #$FF                    ; SET ALL PINS ON PORT A TO OUTPUT
00:106C 8D02C0          	    44:                 STA     IO_DDR_DATA
00:106F A582            	    45:                 LDA     IO_KEY                  ; RESTORE KEYPESS
00:1071 60              	    46:                 RTS
                        	    47: 

Source: ".\Examples\mandelbrot.s"
                        	    30:     .include mandel_copro.s

Source: "mandel_copro.s"
                        	     1:    .include fixedpt.s

Source: "fixedpt.s"
                        	     1: FP_A = $FB
                        	     2: FP_B = $FD
                        	     3: FP_C = $F0
                        	     4: FP_R = $F2
                        	     5: 
                        	     6: CP_A = $10
                        	     7: CP_B = $18
                        	     8: CP_ML = $00
                        	     9: CP_MH = $01
                        	    10: CP_MD = $02
                        	    11: CP_DV = $03
                        	    12: CP_S0 = $04
                        	    13: CP_S1 = $05
                        	    14: CP_S2 = $06
                        	    15: CP_S3 = $07
                        	    16: 
                        	    17: fp_lda_byte:  ;FP_A = A
00:1072 85FC            	    18:    sta FP_A+1
00:1074 64FB            	    19:    stz FP_A
00:1076 60              	    20:    rts
                        	    21: 
                        	    22: fp_ldb_byte: ; FP_B = A
00:1077 85FE            	    23:    sta FP_B+1
00:1079 64FD            	    24:    stz FP_B
00:107B 60              	    25:    rts
                        	    26: 
                        	    27: FP_LDA .macro addr
                        	    28:    lda \addr
                        	    29:    sta FP_A
                        	    30:    lda \addr+1
                        	    31:    sta FP_A+1
                        	    32: .endmacro
                        	    33: 
                        	    34: FP_LDB .macro addr
                        	    35:    lda \addr
                        	    36:    sta FP_B
                        	    37:    lda \addr+1
                        	    38:    sta FP_B+1
                        	    39: .endmacro
                        	    40: 
                        	    41: FP_LDA_IMM .macro  val
                        	    42:    lda #<\val
                        	    43:    sta FP_A
                        	    44:    lda #>\val
                        	    45:    sta FP_A+1
                        	    46: .endmacro
                        	    47: 
                        	    48: FP_LDB_IMM .macro  val
                        	    49:    lda #<\val
                        	    50:    sta FP_B
                        	    51:    lda #>\val
                        	    52:    sta FP_B+1
                        	    53: .endmacro
                        	    54: 
                        	    55: FP_LDA_IMM_INT .macro  val
                        	    56:    stz FP_A
                        	    57:    lda #\val
                        	    58:    sta FP_A+1
                        	    59: .endmacro
                        	    60: 
                        	    61: FP_LDB_IMM_INT .macro  val
                        	    62:    stz FP_B
                        	    63:    lda #\val
                        	    64:    sta FP_B+1
                        	    65: .endmacro
                        	    66: 
                        	    67: FP_STC .macro addr
                        	    68:    lda FP_C
                        	    69:    sta \addr
                        	    70:    lda FP_C+1
                        	    71:    sta \addr+1
                        	    72: .endmacro
                        	    73: 
                        	    74: fp_floor_byte: ; A = floor(FP_C)
00:107C A5F1            	    75:    lda FP_C+1
00:107E 2980            	    76:    and #$80
00:1080 F00C            	    77:    beq return$
00:1082 A5F0            	    78:    lda FP_C
00:1084 C900            	    79:    cmp #0
00:1086 D003            	    80:    bne decc$
00:1088 A5F1            	    81:    lda FP_C+1
00:108A 60              	    82:    rts
                        	    83: decc$:
00:108B A5F0            	    84:    lda FP_C
00:108D 3A              	    85:    dec
                        	    86: return$:
00:108E 60              	    87:    rts
                        	    88: 
                        	    89: fp_floor: ; FP_C = floor(FP_C)
00:108F 24F1            	    90:    bit FP_C+1
00:1091 1008            	    91:    bpl zerofrac$
00:1093 A5F0            	    92:    lda FP_C
00:1095 C900            	    93:    cmp #0
00:1097 F002            	    94:    beq zerofrac$
00:1099 C6F1            	    95:    dec FP_C+1
                        	    96: zerofrac$:
00:109B 64F0            	    97:    stz FP_C
00:109D 60              	    98:    rts
                        	    99: 
                        	   100: FP_TCA .macro  ; FP_A = FP_C
                        	   101:    lda FP_C
                        	   102:    sta FP_A
                        	   103:    lda FP_C+1
                        	   104:    sta FP_A+1
                        	   105: .endmacro
                        	   106: 
                        	   107: FP_TCB .macro  ; FP_B = FP_C
                        	   108:    lda FP_C
                        	   109:    sta FP_B
                        	   110:    lda FP_C+1
                        	   111:    sta FP_B+1
                        	   112: .endmacro
                        	   113: 
                        	   114: fp_subtract: ; FP_C = FP_A - FP_B
00:109E A5FB            	   115:    lda FP_A
00:10A0 38              	   116:    sec
00:10A1 E5FD            	   117:    sbc FP_B
00:10A3 85F0            	   118:    sta FP_C
00:10A5 A5FC            	   119:    lda FP_A+1
00:10A7 E5FE            	   120:    sbc FP_B+1
00:10A9 85F1            	   121:    sta FP_C+1
00:10AB 60              	   122:    rts
                        	   123: 
                        	   124: fp_add: ; FP_C = FP_A + FP_B
00:10AC A5FB            	   125:    lda FP_A
00:10AE 18              	   126:    clc
00:10AF 65FD            	   127:    adc FP_B
00:10B1 85F0            	   128:    sta FP_C
00:10B3 A5FC            	   129:    lda FP_A+1
00:10B5 65FE            	   130:    adc FP_B+1
00:10B7 85F1            	   131:    sta FP_C+1
00:10B9 60              	   132:    rts
                        	   133: 
                        	   134: fp_divide: ; FP_C = FP_A / FP_B; FP_R = FP_A % FP_B
00:10BA DA              	   135:    phx
00:10BB 5A              	   136:    phy
00:10BC A5FD            	   137:    lda FP_B
00:10BE 48              	   138:    pha
00:10BF A5FE            	   139:    lda FP_B+1
00:10C1 48              	   140:    pha ; preserve original B on stack
00:10C2 24FC            	   141:    bit FP_A+1
00:10C4 300A            	   142:    bmi abs_a$
00:10C6 A5FB            	   143:    lda FP_A
00:10C8 85F0            	   144:    sta FP_C
00:10CA A5FC            	   145:    lda FP_A+1
00:10CC 85F1            	   146:    sta FP_C+1
00:10CE 800D            	   147:    bra check_sign_b$
                        	   148: abs_a$:
00:10D0 A900            	   149:    lda #0
00:10D2 38              	   150:    sec
00:10D3 E5FB            	   151:    sbc FP_A
00:10D5 85F0            	   152:    sta FP_C
00:10D7 A900            	   153:    lda #0
00:10D9 E5FC            	   154:    sbc FP_A+1
00:10DB 85F1            	   155:    sta FP_C+1 ; C = |A|
                        	   156: check_sign_b$:
00:10DD 24FE            	   157:    bit FP_B+1
00:10DF 100D            	   158:    bpl shift_b$
00:10E1 A900            	   159:    lda #0
00:10E3 38              	   160:    sec
00:10E4 E5FD            	   161:    sbc FP_B
00:10E6 85FD            	   162:    sta FP_B
00:10E8 A900            	   163:    lda #0
00:10EA E5FE            	   164:    sbc FP_B+1
00:10EC 85FE            	   165:    sta FP_B+1
                        	   166: shift_b$:
00:10EE A5FE            	   167:    lda FP_B+1
00:10F0 85FD            	   168:    sta FP_B
00:10F2 A900            	   169:    lda #0
00:10F4 85FE            	   170:    sta FP_B+1
00:10F6 64F2            	   171:    stz FP_R
00:10F8 64F3            	   172:    stz FP_R+1
00:10FA A210            	   173:    ldx #16     ;There are 16 bits in C
                        	   174: loop1$:
00:10FC 06F0            	   175:    asl FP_C    ;Shift hi bit of C into REM
00:10FE 26F1            	   176:    rol FP_C+1  ;(vacating the lo bit, which will be used for the quotient)
00:1100 26F2            	   177:    rol FP_R
00:1102 26F3            	   178:    rol FP_R+1
00:1104 A5F2            	   179:    lda FP_R
00:1106 38              	   180:    sec         ;Trial subtraction
00:1107 E5FD            	   181:    sbc FP_B
00:1109 A8              	   182:    tay
00:110A A5F3            	   183:    lda FP_R+1
00:110C E5FE            	   184:    sbc FP_B+1
00:110E 9006            	   185:    bcc loop2$  ;Did subtraction succeed?
00:1110 85F3            	   186:    sta FP_R+1   ;If yes, save it
00:1112 84F2            	   187:    sty FP_R
00:1114 E6F0            	   188:    inc FP_C    ;and record a 1 in the quotient
                        	   189: loop2$:
00:1116 CA              	   190:    dex
00:1117 D0E3            	   191:    bne loop1$
00:1119 68              	   192:    pla
00:111A 85FE            	   193:    sta FP_B+1
00:111C 68              	   194:    pla
00:111D 85FD            	   195:    sta FP_B
00:111F 24FE            	   196:    bit FP_B+1
00:1121 3007            	   197:    bmi check_cancel$
00:1123 24FC            	   198:    bit FP_A+1
00:1125 3007            	   199:    bmi negative$
00:1127 4C3B11          	   200:    jmp return$
                        	   201: check_cancel$:
00:112A 24FC            	   202:    bit FP_A+1
00:112C 300D            	   203:    bmi return$
                        	   204: negative$:
00:112E A900            	   205:    lda #0
00:1130 38              	   206:    sec
00:1131 E5F0            	   207:    sbc FP_C
00:1133 85F0            	   208:    sta FP_C
00:1135 A900            	   209:    lda #0
00:1137 E5F1            	   210:    sbc FP_C+1
00:1139 85F1            	   211:    sta FP_C+1
                        	   212: return$:
00:113B 7A              	   213:    ply
00:113C FA              	   214:    plx
00:113D 60              	   215:    rts
                        	   216: 
                        	   217: fp_multiply: ; FP_C = FP_A * FP_B; FP_R overflow
00:113E DA              	   218:    phx
00:113F 5A              	   219:    phy
                        	   220:    ; push original A and B to stack
00:1140 A5FB            	   221:    lda FP_A
00:1142 48              	   222:    pha
00:1143 A5FC            	   223:    lda FP_A+1
00:1145 48              	   224:    pha
00:1146 A5FD            	   225:    lda FP_B
00:1148 48              	   226:    pha
00:1149 A5FE            	   227:    lda FP_B+1
00:114B 48              	   228:    pha
00:114C 24FC            	   229:    bit FP_A+1
00:114E 100D            	   230:    bpl check_sign_b$
00:1150 A900            	   231:    lda #0
00:1152 38              	   232:    sec
00:1153 E5FB            	   233:    sbc FP_A
00:1155 85FB            	   234:    sta FP_A
00:1157 A900            	   235:    lda #0
00:1159 E5FC            	   236:    sbc FP_A+1
00:115B 85FC            	   237:    sta FP_A+1 ; A = |A|
                        	   238: check_sign_b$:
00:115D 24FE            	   239:    bit FP_B+1
00:115F 100D            	   240:    bpl init_c$
00:1161 A900            	   241:    lda #0
00:1163 38              	   242:    sec
00:1164 E5FD            	   243:    sbc FP_B
00:1166 85FD            	   244:    sta FP_B
00:1168 A900            	   245:    lda #0
00:116A E5FE            	   246:    sbc FP_B+1
00:116C 85FE            	   247:    sta FP_B+1 ; B = |B|
                        	   248: init_c$:
00:116E A900            	   249:    lda #0
00:1170 85F2            	   250:    sta FP_R
00:1172 85F0            	   251:    sta FP_C
00:1174 85F1            	   252:    sta FP_C+1
00:1176 A210            	   253:    ldx #16
                        	   254: loop1$:
00:1178 46FE            	   255:    lsr FP_B+1
00:117A 66FD            	   256:    ror FP_B
00:117C 900B            	   257:    bcc loop2$
00:117E A8              	   258:    tay
00:117F 18              	   259:    clc
00:1180 A5FB            	   260:    lda FP_A
00:1182 65F2            	   261:    adc FP_R
00:1184 85F2            	   262:    sta FP_R
00:1186 98              	   263:    tya
00:1187 65FC            	   264:    adc FP_A+1
                        	   265: loop2$:
00:1189 6A              	   266:    ror
00:118A 66F2            	   267:    ror FP_R
00:118C 66F1            	   268:    ror FP_C+1
00:118E 66F0            	   269:    ror FP_C
00:1190 CA              	   270:    dex
00:1191 D0E5            	   271:    bne loop1$
00:1193 85F3            	   272:    sta FP_R+1
00:1195 A208            	   273:    ldx #8
                        	   274: loop3$:
00:1197 46F3            	   275:    lsr FP_R+1
00:1199 66F2            	   276:    ror FP_R
00:119B 66F1            	   277:    ror FP_C+1
00:119D 66F0            	   278:    ror FP_C
00:119F CA              	   279:    dex
00:11A0 D0F5            	   280:    bne loop3$
                        	   281:    ; restore A and B
00:11A2 68              	   282:    pla
00:11A3 85FE            	   283:    sta FP_B+1
00:11A5 68              	   284:    pla
00:11A6 85FD            	   285:    sta FP_B
00:11A8 68              	   286:    pla
00:11A9 85FC            	   287:    sta FP_A+1
00:11AB 68              	   288:    pla
00:11AC 85FB            	   289:    sta FP_A
00:11AE 24FE            	   290:    bit FP_B+1
00:11B0 3007            	   291:    bmi check_cancel$
00:11B2 24FC            	   292:    bit FP_A+1
00:11B4 3007            	   293:    bmi negative$
00:11B6 4CCA11          	   294:    jmp return$
                        	   295: check_cancel$:
00:11B9 24FC            	   296:    bit FP_A+1
00:11BB 300D            	   297:    bmi return$
                        	   298: negative$:
00:11BD A900            	   299:    lda #0
00:11BF 38              	   300:    sec
00:11C0 E5F0            	   301:    sbc FP_C
00:11C2 85F0            	   302:    sta FP_C
00:11C4 A900            	   303:    lda #0
00:11C6 E5F1            	   304:    sbc FP_C+1
00:11C8 85F1            	   305:    sta FP_C+1
                        	   306: return$:
00:11CA 7A              	   307:    ply
00:11CB FA              	   308:    plx
00:11CC 60              	   309:    rts
                        	   310: 
                        	   311: ; Optimised version of SQUARE FP_A, only have to check neg at start, no need to neg at end as squares are ALWAYS positv
                        	   312: fp_square: ; FP_C = FP_A * FP_A; FP_R overflow
00:11CD DA              	   313:    phx
00:11CE 5A              	   314:    phy
                        	   315:    ; push original FP_A to stack & copy to FP_B
00:11CF A5FB            	   316:    lda FP_A
00:11D1 85FD            	   317:    sta FP_B
00:11D3 48              	   318:    pha
00:11D4 A5FC            	   319:    lda FP_A+1
00:11D6 85FE            	   320:    sta FP_B+1
00:11D8 48              	   321:    pha
00:11D9 24FC            	   322:    bit FP_A+1
00:11DB 1011            	   323:    bpl init_c$
00:11DD A900            	   324:    lda #0
00:11DF 38              	   325:    sec
00:11E0 E5FB            	   326:    sbc FP_A
00:11E2 85FB            	   327:    sta FP_A
00:11E4 85FD            	   328:    sta FP_B
00:11E6 A900            	   329:    lda #0
00:11E8 E5FC            	   330:    sbc FP_A+1
00:11EA 85FC            	   331:    sta FP_A+1 ; A = |A|
00:11EC 85FE            	   332:    sta FP_B+1 ; B = |A|
                        	   333: init_c$:
00:11EE A900            	   334:    lda #0
00:11F0 85F2            	   335:    sta FP_R
00:11F2 85F0            	   336:    sta FP_C
00:11F4 85F1            	   337:    sta FP_C+1
00:11F6 A210            	   338:    ldx #16
                        	   339: loop1$:
00:11F8 46FE            	   340:    lsr FP_B+1
00:11FA 66FD            	   341:    ror FP_B
00:11FC 900B            	   342:    bcc loop2$
00:11FE A8              	   343:    tay
00:11FF 18              	   344:    clc
00:1200 A5FB            	   345:    lda FP_A
00:1202 65F2            	   346:    adc FP_R
00:1204 85F2            	   347:    sta FP_R
00:1206 98              	   348:    tya
00:1207 65FC            	   349:    adc FP_A+1
                        	   350: loop2$:
00:1209 6A              	   351:    ror
00:120A 66F2            	   352:    ror FP_R
00:120C 66F1            	   353:    ror FP_C+1
00:120E 66F0            	   354:    ror FP_C
00:1210 CA              	   355:    dex
00:1211 D0E5            	   356:    bne loop1$
00:1213 85F3            	   357:    sta FP_R+1
00:1215 A208            	   358:    ldx #8
                        	   359: loop3$:
00:1217 46F3            	   360:    lsr FP_R+1
00:1219 66F2            	   361:    ror FP_R
00:121B 66F1            	   362:    ror FP_C+1
00:121D 66F0            	   363:    ror FP_C
00:121F CA              	   364:    dex
00:1220 D0F5            	   365:    bne loop3$
                        	   366:    ; restore A
00:1222 68              	   367:    pla
00:1223 85FC            	   368:    sta FP_A+1
00:1225 68              	   369:    pla
00:1226 85FB            	   370:    sta FP_A
                        	   371: return$:
00:1228 7A              	   372:    ply
00:1229 FA              	   373:    plx
00:122A 60              	   374:    rts
                        	   375: 
                        	   376: cp_multiply: ; FP_C = FP_A * FP_B; FP_R overflow
00:122B DA              	   377:    phx
00:122C 5A              	   378:    phy
                        	   379:    ; push original A and B to stack
00:122D A5FB            	   380:    lda FP_A
00:122F 48              	   381:    pha
00:1230 A5FC            	   382:    lda FP_A+1
00:1232 48              	   383:    pha
00:1233 A5FD            	   384:    lda FP_B
00:1235 48              	   385:    pha
00:1236 A5FE            	   386:    lda FP_B+1
00:1238 48              	   387:    pha
00:1239 24FC            	   388:    bit FP_A+1
00:123B 100D            	   389:    bpl check_sign_b$
00:123D A900            	   390:    lda #0
00:123F 38              	   391:    sec
00:1240 E5FB            	   392:    sbc FP_A
00:1242 85FB            	   393:    sta FP_A
00:1244 A900            	   394:    lda #0
00:1246 E5FC            	   395:    sbc FP_A+1
00:1248 85FC            	   396:    sta FP_A+1 ; A = |A|
                        	   397: check_sign_b$:
00:124A 24FE            	   398:    bit FP_B+1
00:124C 100D            	   399:    bpl init_c$
00:124E A900            	   400:    lda #0
00:1250 38              	   401:    sec
00:1251 E5FD            	   402:    sbc FP_B
00:1253 85FD            	   403:    sta FP_B
00:1255 A900            	   404:    lda #0
00:1257 E5FE            	   405:    sbc FP_B+1
00:1259 85FE            	   406:    sta FP_B+1 ; B = |B|
                        	   407: init_c$:
                        	   408: ; The magic happens here
                        	   409:    ; Init C ard R
00:125B A900            	   410:    lda #0
00:125D 85F0            	   411:    sta FP_C
00:125F 85F1            	   412:    sta FP_C+1
00:1261 85F2            	   413:    sta FP_R
                        	   414: 
00:1263 A5FB            	   415:    lda FP_A
00:1265 8510            	   416:    sta CP_A
00:1267 A5FD            	   417:    lda FP_B
00:1269 8518            	   418:    sta CP_B
00:126B A501            	   419:    lda CP_MH
00:126D 85F0            	   420:    sta FP_C
                        	   421: 
00:126F A5FC            	   422:    lda FP_A+1
00:1271 8510            	   423:    sta CP_A
00:1273 18              	   424:    clc
00:1274 A5F0            	   425:    lda FP_C
00:1276 6500            	   426:    adc CP_ML
00:1278 85F0            	   427:    sta FP_C
00:127A A5F1            	   428:    lda FP_C+1
00:127C 6501            	   429:    adc CP_MH
00:127E 85F1            	   430:    sta FP_C+1
                        	   431: 
00:1280 A5FB            	   432:    lda FP_A
00:1282 8510            	   433:    sta CP_A
00:1284 A5FE            	   434:    lda FP_B+1
00:1286 8518            	   435:    sta CP_B
00:1288 18              	   436:    clc
00:1289 A5F0            	   437:    lda FP_C
00:128B 6500            	   438:    adc CP_ML
00:128D 85F0            	   439:    sta FP_C
00:128F A5F1            	   440:    lda FP_C+1
00:1291 6501            	   441:    adc CP_MH
00:1293 85F1            	   442:    sta FP_C+1
                        	   443: 
00:1295 A5FC            	   444:    lda FP_A+1
00:1297 8510            	   445:    sta CP_A
00:1299 18              	   446:    clc
00:129A A5F1            	   447:    lda FP_C+1
00:129C 6500            	   448:    adc CP_ML
00:129E 85F1            	   449:    sta FP_C+1
00:12A0 A5F2            	   450:    lda FP_R
00:12A2 6501            	   451:    adc CP_MH
00:12A4 85F2            	   452:    sta FP_R
                        	   453: ;
                        	   454:    ; restore A and B
00:12A6 68              	   455:    pla
00:12A7 85FE            	   456:    sta FP_B+1
00:12A9 68              	   457:    pla
00:12AA 85FD            	   458:    sta FP_B
00:12AC 68              	   459:    pla
00:12AD 85FC            	   460:    sta FP_A+1
00:12AF 68              	   461:    pla
00:12B0 85FB            	   462:    sta FP_A
00:12B2 24FE            	   463:    bit FP_B+1
00:12B4 3007            	   464:    bmi check_cancel$
00:12B6 24FC            	   465:    bit FP_A+1
00:12B8 3007            	   466:    bmi negative$
00:12BA 4CCE12          	   467:    jmp return$
                        	   468: check_cancel$:
00:12BD 24FC            	   469:    bit FP_A+1
00:12BF 300D            	   470:    bmi return$
                        	   471: negative$:
00:12C1 A900            	   472:    lda #0
00:12C3 38              	   473:    sec
00:12C4 E5F0            	   474:    sbc FP_C
00:12C6 85F0            	   475:    sta FP_C
00:12C8 A900            	   476:    lda #0
00:12CA E5F1            	   477:    sbc FP_C+1
00:12CC 85F1            	   478:    sta FP_C+1
                        	   479: return$:
00:12CE 7A              	   480:    ply
00:12CF FA              	   481:    plx
00:12D0 60              	   482:    rts
                        	   483: 
                        	   484: ; Use co-pro lookup for squares: $10 MSB $18 LSB. result $04,$05,$06,$07 LSB to MSB
                        	   485: cp_square:
00:12D1 DA              	   486:    phx
00:12D2 5A              	   487:    phy
                        	   488:    ; push original FP_A to stack & copy to FP_B
00:12D3 A5FB            	   489:    lda FP_A
00:12D5 48              	   490:    pha
00:12D6 A5FC            	   491:    lda FP_A+1
00:12D8 48              	   492:    pha
                        	   493:    ; Make A positive
00:12D9 24FC            	   494:    bit FP_A+1
00:12DB 100D            	   495:    bpl square_c$
00:12DD A900            	   496:    lda #0
00:12DF 38              	   497:    sec
00:12E0 E5FB            	   498:    sbc FP_A
00:12E2 85FB            	   499:    sta FP_A
00:12E4 A900            	   500:    lda #0
00:12E6 E5FC            	   501:    sbc FP_A+1
00:12E8 85FC            	   502:    sta FP_A+1 ; A = |A|
                        	   503: square_c$:
                        	   504: 
00:12EA A5FB            	   505:    lda FP_A
00:12EC 8518            	   506:    sta CP_B
00:12EE A5FC            	   507:    lda FP_A+1
00:12F0 8510            	   508:    sta CP_A
                        	   509: 
00:12F2 A505            	   510:    lda CP_S1
00:12F4 85F0            	   511:    sta FP_C
00:12F6 A506            	   512:    lda CP_S2
00:12F8 85F1            	   513:    sta FP_C+1
00:12FA A507            	   514:    lda CP_S3
00:12FC 85F2            	   515:    sta FP_R
                        	   516: 
00:12FE 68              	   517:    pla
00:12FF 85FC            	   518:    sta FP_A+1
00:1301 68              	   519:    pla
00:1302 85FB            	   520:    sta FP_A
                        	   521: return$:
00:1304 7A              	   522:    ply
00:1305 FA              	   523:    plx
00:1306 60              	   524:    rts
                        	   525: 

Source: "mandel_copro.s"
                        	     2: 
                        	     3: MAND_XMIN = $FD80 ; -2.5
                        	     4: MAND_XMAX = $0380 ; 3.5
                        	     5: MAND_YMIN = $FF00 ; -1
                        	     6: MAND_YMAX = $0200 ; 2
                        	     7: 
                        	     8: MAND_WIDTH = 32
                        	     9: MAND_HEIGHT = 22
                        	    10: MAND_MAX_IT = 15
                        	    11: 
00:1307 0000            	    12: mand_x0:       .word 0
00:1309 0000            	    13: mand_y0:       .word 0
00:130B 0000            	    14: mand_x:        .word 0
00:130D 0000            	    15: mand_y:        .word 0
00:130F 0000            	    16: mand_x2:       .word 0
00:1311 0000            	    17: mand_y2:       .word 0
00:1313 0000            	    18: mand_xtemp:    .word 0
                        	    19: 
                        	    20: ; Input:
                        	    21: ;  X,Y - bitmap coordinates
                        	    22: ; Output: A - # iterations executed (0 to MAND_MAX_IT-1)
                        	    23: mand_get:
00:1315 DA              	    24:    phx
00:1316 5A              	    25:    phy
00:1317 8A              	    26:    txa
00:1318 207210          	    27:    jsr fp_lda_byte   ; A = X coordinate
                        	    28:    FP_LDB_IMM MAND_XMAX  ; B = max scaled X
00:131B A980            	     1M    lda #<MAND_XMAX  
00:131D 85FD            	     2M    sta FP_B
00:131F A903            	     3M    lda #>MAND_XMAX  
00:1321 85FE            	     4M    sta FP_B+1
00:1323 202B12          	    29:    jsr cp_multiply   ; C = A*B
                        	    30:    FP_TCA            ; A = C (X*Xmax)
00:1326 A5F0            	     1M    lda FP_C
00:1328 85FB            	     2M    sta FP_A
00:132A A5F1            	     3M    lda FP_C+1
00:132C 85FC            	     4M    sta FP_A+1
                        	    31:    FP_LDB_IMM_INT MAND_WIDTH ; B = width
00:132E 64FD            	     1M    stz FP_B
00:1330 A920            	     2M    lda #MAND_WIDTH 
00:1332 85FE            	     3M    sta FP_B+1
00:1334 20BA10          	    32:    jsr fp_divide     ; C = A/B
                        	    33:    FP_TCA            ; A = C (scaled X with zero min)
00:1337 A5F0            	     1M    lda FP_C
00:1339 85FB            	     2M    sta FP_A
00:133B A5F1            	     3M    lda FP_C+1
00:133D 85FC            	     4M    sta FP_A+1
                        	    34:    FP_LDB_IMM MAND_XMIN  ; B = min scaled X
00:133F A980            	     1M    lda #<MAND_XMIN  
00:1341 85FD            	     2M    sta FP_B
00:1343 A9FD            	     3M    lda #>MAND_XMIN  
00:1345 85FE            	     4M    sta FP_B+1
00:1347 20AC10          	    35:    jsr fp_add        ; C = A+B (scaled X)
                        	    36:    FP_STC mand_x0    ; x0 = C
00:134A A5F0            	     1M    lda FP_C
00:134C 8D0713          	     2M    sta mand_x0    
00:134F A5F1            	     3M    lda FP_C+1
00:1351 8D0813          	     4M    sta mand_x0    +1
00:1354 68              	    37:    pla               ; retrieve Y from stack
00:1355 48              	    38:    pha               ; put Y back on stack
00:1356 207210          	    39:    jsr fp_lda_byte   ; A = Y coordinate
                        	    40:    FP_LDB_IMM MAND_YMAX  ; B = max scaled Y
00:1359 A900            	     1M    lda #<MAND_YMAX  
00:135B 85FD            	     2M    sta FP_B
00:135D A902            	     3M    lda #>MAND_YMAX  
00:135F 85FE            	     4M    sta FP_B+1
00:1361 202B12          	    41:    jsr cp_multiply   ; C = A*B
                        	    42:    FP_TCA            ; A = C (Y*Ymax)
00:1364 A5F0            	     1M    lda FP_C
00:1366 85FB            	     2M    sta FP_A
00:1368 A5F1            	     3M    lda FP_C+1
00:136A 85FC            	     4M    sta FP_A+1
                        	    43:    FP_LDB_IMM_INT  MAND_HEIGHT ; B = height
00:136C 64FD            	     1M    stz FP_B
00:136E A916            	     2M    lda #MAND_HEIGHT 
00:1370 85FE            	     3M    sta FP_B+1
00:1372 20BA10          	    44:    jsr fp_divide     ; C = A/B
                        	    45:    FP_TCA            ; A = C (scaled Y with zero min)
00:1375 A5F0            	     1M    lda FP_C
00:1377 85FB            	     2M    sta FP_A
00:1379 A5F1            	     3M    lda FP_C+1
00:137B 85FC            	     4M    sta FP_A+1
                        	    46:    FP_LDB_IMM MAND_YMIN  ; B = min scaled Y
00:137D A900            	     1M    lda #<MAND_YMIN  
00:137F 85FD            	     2M    sta FP_B
00:1381 A9FF            	     3M    lda #>MAND_YMIN  
00:1383 85FE            	     4M    sta FP_B+1
00:1385 20AC10          	    47:    jsr fp_add        ; C = A+B (scaled Y)
                        	    48:    FP_STC mand_y0    ; y0 = C
00:1388 A5F0            	     1M    lda FP_C
00:138A 8D0913          	     2M    sta mand_y0    
00:138D A5F1            	     3M    lda FP_C+1
00:138F 8D0A13          	     4M    sta mand_y0    +1
00:1392 9C0B13          	    49:    stz mand_x
00:1395 9C0C13          	    50:    stz mand_x+1
00:1398 9C0D13          	    51:    stz mand_y
00:139B 9C0E13          	    52:    stz mand_y+1
00:139E A200            	    53:    ldx #0            ; X = I (init to 0)
                        	    54: .loop:
                        	    55:    FP_LDA mand_x     ; A = X
00:13A0 AD0B13          	     1M    lda mand_x     
00:13A3 85FB            	     2M    sta FP_A
00:13A5 AD0C13          	     3M    lda mand_x     +1
00:13A8 85FC            	     4M    sta FP_A+1
00:13AA 20D112          	    56:    jsr cp_square     ; C = X^2
                        	    57:    FP_STC mand_x2
00:13AD A5F0            	     1M    lda FP_C
00:13AF 8D0F13          	     2M    sta mand_x2
00:13B2 A5F1            	     3M    lda FP_C+1
00:13B4 8D1013          	     4M    sta mand_x2+1
                        	    58:    FP_LDA mand_y     ; A = Y
00:13B7 AD0D13          	     1M    lda mand_y     
00:13BA 85FB            	     2M    sta FP_A
00:13BC AD0E13          	     3M    lda mand_y     +1
00:13BF 85FC            	     4M    sta FP_A+1
00:13C1 20D112          	    59:    jsr cp_square     ; C = Y^2
                        	    60:    FP_STC mand_y2
00:13C4 A5F0            	     1M    lda FP_C
00:13C6 8D1113          	     2M    sta mand_y2
00:13C9 A5F1            	     3M    lda FP_C+1
00:13CB 8D1213          	     4M    sta mand_y2+1
                        	    61:    FP_LDA mand_x2    ; A = X^2
00:13CE AD0F13          	     1M    lda mand_x2    
00:13D1 85FB            	     2M    sta FP_A
00:13D3 AD1013          	     3M    lda mand_x2    +1
00:13D6 85FC            	     4M    sta FP_A+1
                        	    62:    FP_TCB            ; B = Y^2
00:13D8 A5F0            	     1M    lda FP_C
00:13DA 85FD            	     2M    sta FP_B
00:13DC A5F1            	     3M    lda FP_C+1
00:13DE 85FE            	     4M    sta FP_B+1
00:13E0 20AC10          	    63:    jsr fp_add        ; C = X^2+Y^2
00:13E3 A5F1            	    64:    lda FP_C+1
00:13E5 38              	    65:    sec
00:13E6 E904            	    66:    sbc #4
00:13E8 F005            	    67:    beq .check_fraction
00:13EA 3007            	    68:    bmi .do_it
00:13EC 4C6314          	    69:    jmp .dec_i
                        	    70: .check_fraction:
00:13EF A5F0            	    71:    lda FP_C
00:13F1 D070            	    72:    bne .dec_i
                        	    73: .do_it:
00:13F3 209E10          	    74:    jsr fp_subtract   ; C = X^2 - Y^2
                        	    75:    FP_TCA            ; A = C (X^2 - Y^2)
00:13F6 A5F0            	     1M    lda FP_C
00:13F8 85FB            	     2M    sta FP_A
00:13FA A5F1            	     3M    lda FP_C+1
00:13FC 85FC            	     4M    sta FP_A+1
                        	    76:    FP_LDB mand_x0    ; B = X0
00:13FE AD0713          	     1M    lda mand_x0    
00:1401 85FD            	     2M    sta FP_B
00:1403 AD0813          	     3M    lda mand_x0    +1
00:1406 85FE            	     4M    sta FP_B+1
00:1408 20AC10          	    77:    jsr fp_add        ; C = X^2 - Y^2 + X0
                        	    78:    FP_STC mand_xtemp ; Xtemp = C
00:140B A5F0            	     1M    lda FP_C
00:140D 8D1313          	     2M    sta mand_xtemp 
00:1410 A5F1            	     3M    lda FP_C+1
00:1412 8D1413          	     4M    sta mand_xtemp +1
                        	    79:    FP_LDA mand_x     ; A = X
00:1415 AD0B13          	     1M    lda mand_x     
00:1418 85FB            	     2M    sta FP_A
00:141A AD0C13          	     3M    lda mand_x     +1
00:141D 85FC            	     4M    sta FP_A+1
00:141F 06FB            	    80:    asl FP_A
00:1421 26FC            	    81:    rol FP_A+1        ; A = 2*X
                        	    82:    FP_LDB mand_y     ; B = Y
00:1423 AD0D13          	     1M    lda mand_y     
00:1426 85FD            	     2M    sta FP_B
00:1428 AD0E13          	     3M    lda mand_y     +1
00:142B 85FE            	     4M    sta FP_B+1
00:142D 202B12          	    83:    jsr cp_multiply   ; C = 2*X*Y
                        	    84:    FP_TCA            ; A = C (2*X*Y)
00:1430 A5F0            	     1M    lda FP_C
00:1432 85FB            	     2M    sta FP_A
00:1434 A5F1            	     3M    lda FP_C+1
00:1436 85FC            	     4M    sta FP_A+1
                        	    85:    FP_LDB mand_y0    ; B = Y0
00:1438 AD0913          	     1M    lda mand_y0    
00:143B 85FD            	     2M    sta FP_B
00:143D AD0A13          	     3M    lda mand_y0    +1
00:1440 85FE            	     4M    sta FP_B+1
00:1442 20AC10          	    86:    jsr fp_add        ; C = 2*X*Y + Y0
                        	    87:    FP_STC mand_y     ; Y = C (2*X*Y + Y0)
00:1445 A5F0            	     1M    lda FP_C
00:1447 8D0D13          	     2M    sta mand_y     
00:144A A5F1            	     3M    lda FP_C+1
00:144C 8D0E13          	     4M    sta mand_y     +1
00:144F AD1313          	    88:    lda mand_xtemp
00:1452 8D0B13          	    89:    sta mand_x
00:1455 AD1413          	    90:    lda mand_xtemp+1
00:1458 8D0C13          	    91:    sta mand_x+1      ; X = Xtemp
00:145B E8              	    92:    inx
00:145C E00F            	    93:    cpx #MAND_MAX_IT
00:145E F003            	    94:    beq .dec_i
00:1460 4CA013          	    95:    jmp .loop
                        	    96: .dec_i:
00:1463 CA              	    97:    dex
00:1464 8A              	    98:    txa
00:1465 7A              	    99:    ply
00:1466 FA              	   100:    plx
00:1467 60              	   101:    rts

Source: ".\Examples\mandelbrot.s"
                        	    31: 


Symbols by name:
CP_A                             E:0010
CP_B                             E:0018
CP_MH                            E:0001
CP_ML                            E:0000
CP_S1                            E:0005
CP_S2                            E:0006
CP_S3                            E:0007
FP_A                             E:00FB
FP_B                             E:00FD
FP_C                             E:00F0
FP_R                             E:00F2
IO_DATA                          E:C000
IO_DDR_CTRL                      E:C003
IO_DDR_DATA                      E:C002
IO_ECHO                          A:1037
IO_IN                            A:1056
IO_INIT                          A:102C
IO_INKEY                         A:1051
IO_KEY                           E:0082
IO_OUT                           A:103C
IO_RD                            E:0001
IO_STATUS                        E:C001
IO_WR                            E:0002
MAND_HEIGHT                      E:0016
MAND_MAX_IT                      E:000F
MAND_WIDTH                       E:0020
MAND_XMAX                        E:0380
MAND_XMIN                        E:FD80
MAND_YMAX                        E:0200
MAND_YMIN                        E:FF00
cp_multiply                      A:122B
cp_square                        A:12D1
fp_add                           A:10AC
fp_divide                        A:10BA
fp_floor                         A:108F
fp_floor_byte                    A:107C
fp_lda_byte                      A:1072
fp_ldb_byte                      A:1077
fp_multiply                      A:113E
fp_square                        A:11CD
fp_subtract                      A:109E
loopx                            A:1009
loopy                            A:1007
mand_get                         A:1315
mand_x                           A:130B
mand_x0                          A:1307
mand_x2                          A:130F
mand_xtemp                       A:1313
mand_y                           A:130D
mand_y0                          A:1309
mand_y2                          A:1311

Symbols by value:
0000 CP_ML
0001 CP_MH
0001 IO_RD
0002 IO_WR
0005 CP_S1
0006 CP_S2
0007 CP_S3
000F MAND_MAX_IT
0010 CP_A
0016 MAND_HEIGHT
0018 CP_B
0020 MAND_WIDTH
0082 IO_KEY
00F0 FP_C
00F2 FP_R
00FB FP_A
00FD FP_B
0200 MAND_YMAX
0380 MAND_XMAX
1007 loopy
1009 loopx
102C IO_INIT
1037 IO_ECHO
103C IO_OUT
1051 IO_INKEY
1056 IO_IN
1072 fp_lda_byte
1077 fp_ldb_byte
107C fp_floor_byte
108F fp_floor
109E fp_subtract
10AC fp_add
10BA fp_divide
113E fp_multiply
11CD fp_square
122B cp_multiply
12D1 cp_square
1307 mand_x0
1309 mand_y0
130B mand_x
130D mand_y
130F mand_x2
1311 mand_y2
1313 mand_xtemp
1315 mand_get
C000 IO_DATA
C001 IO_STATUS
C002 IO_DDR_DATA
C003 IO_DDR_CTRL
FD80 MAND_XMIN
FF00 MAND_YMIN
